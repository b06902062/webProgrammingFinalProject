[{"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\index.js":"1","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\App.js":"2","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\reportWebVitals.js":"3","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\buttonList.js":"4","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\axios.js":"5","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\useCanvas.js":"6","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\useGridCanvas.js":"7"},{"size":517,"mtime":1609951679434,"results":"8","hashOfConfig":"9"},{"size":7082,"mtime":1610387630105,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1609951679435,"results":"11","hashOfConfig":"9"},{"size":1682,"mtime":1610384136851,"results":"12","hashOfConfig":"9"},{"size":1281,"mtime":1609951679432,"results":"13","hashOfConfig":"9"},{"size":2489,"mtime":1610390119661,"results":"14","hashOfConfig":"9"},{"size":2767,"mtime":1610388410604,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"13q5p3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\index.js",[],["34","35"],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\App.js",["36","37","38","39","40","41","42","43"],"import Soundfont from 'soundfont-player'\r\nimport PianoRoll from 'react-piano-roll'\r\nimport './App.css'\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport ButtonList from './buttonList.js'\r\nimport { getInitPiece, composeRequest } from './axios'\r\nimport { useCanvas, Canvas, myDraw } from './useCanvas.js';\r\nimport { useGridCanvas, GridCanvas } from './useGridCanvas.js';\r\n\r\n//import 'antd/dist/antd.css';\r\nimport {\r\n  PlayCircleFilled,\r\n  PauseCircleFilled,\r\n  SlidersFilled,\r\n} from '@ant-design/icons';\r\nimport { Layout } from 'antd';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nlet ac, pianoPlayer, timeOutButt;\r\n\r\nfunction App() {\r\n  /***** Audio Playing *****/\r\n  const [initNotes, setInitNotes] = useState([])\r\n  const [composedNotes, setComposedNotes] = useState([])\r\n  const [isPlayingInit, setIsPlayingInit] = useState(false)\r\n  const [isPlayingComposed, setIsPlayingComposed] = useState(false)\r\n\r\n  const tick2Sec = (tic, tpb = 480) => {\r\n    return parseFloat(60*tic/tempo/tpb);\r\n  }\r\n  \r\n  const midi2Play = e => {\r\n    return {\r\n      time: tick2Sec(e.start_tick),\r\n      note: e.key,\r\n      gain: 5*e.velocity/128,\r\n      duration: tick2Sec(e.duration)\r\n    }\r\n  }\r\n\r\n  const myPlayer = (player, notes, setFunc) => {\r\n    return new Promise((resolve) => {\r\n      const noteSched = notes.map(midi2Play)\r\n      const timeoutSec = 1000 * (noteSched[ noteSched.length - 1 ].time + noteSched[ noteSched.length - 1 ].duration);\r\n      player.schedule(ac.currentTime, noteSched)\r\n      timeOutButt = setTimeout(() => {\r\n        setFunc(false)\r\n        resolve()\r\n      }, timeoutSec)\r\n    })\r\n  }\r\n\r\n  const playButton = (tag) => {\r\n    return async() => {\r\n      let isPlaying = (tag === \"i\")? isPlayingInit : isPlayingComposed\r\n      let notes = (tag === \"i\")? initNotes : composedNotes\r\n      let setFunc = (tag === \"i\")?\r\n        ele => {setIsPlayingInit(ele)} :\r\n        ele => {setIsPlayingComposed(ele)}\r\n      if(!isPlaying){\r\n        setFunc(true)\r\n        await myPlayer(pianoPlayer, notes, setFunc)\r\n      }\r\n      else{\r\n        setFunc(false)\r\n        pianoPlayer.stop()\r\n        clearTimeout(timeOutButt)\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect( async () => {\r\n    ac = new window.AudioContext();\r\n    pianoPlayer = await Soundfont.instrument(ac, 'acoustic_grand_piano', { soundfont: 'MusyngKite' });\r\n  }, [])\r\n\r\n  /***** Button  List  React *****/\r\n  const [polyph, setPolyph] = useState([])\r\n  const [rhythm, setRhythm] = useState([])\r\n  const [pLock, setPLock] = useState(true)\r\n  const [rLock, setRLock] = useState(true)\r\n\r\n  const toggleFunc = (index, op, typ) => {\r\n    return (() => {\r\n      (typ === \"polyph\")?\r\n        pLock?\r\n          setPolyph(polyph.map(ele => (ele + op))) :\r\n          setPolyph(polyph.map((ele, ind) => ((ind === index)? ele + op : ele)))\r\n        :\r\n        rLock?\r\n          setRhythm(rhythm.map(ele => (ele + op))) :\r\n          setRhythm(rhythm.map((ele, ind) => ((ind === index)? ele + op : ele)))\r\n    })\r\n  }\r\n\r\n  const pLockFunc = () => {\r\n    if(pLock){\r\n      setPolyph(polyph.map(ele => Math.max(Math.min(ele, 7), 0)))\r\n    }\r\n    setPLock(!pLock) \r\n  }\r\n\r\n  const rLockFunc = () => {\r\n    if(rLock){\r\n      setRhythm(rhythm.map(ele => Math.max(Math.min(ele, 7), 0)))\r\n    }\r\n    setRLock(!rLock)\r\n  }\r\n\r\n  /***** Webserver requests *****/\r\n  const [refId, setRefId] = useState(-1)\r\n  const [tempo, setTempo] = useState(120)\r\n  const [isComposing, setIsComposing] = useState(false)\r\n  const [hasComposed, setHasComposed] = useState(false)\r\n\r\n  useEffect( async () => {\r\n    ac = new window.AudioContext();\r\n    pianoPlayer = await Soundfont.instrument(ac, 'acoustic_grand_piano', { soundfont: 'MusyngKite' });\r\n    let initPiece = await getInitPiece();\r\n    setTempo(initPiece.tempo);\r\n    setRefId(initPiece.ref_id);\r\n    setInitNotes(initPiece.notes);\r\n    setPolyph(initPiece.attr_cls.polyph);\r\n    setRhythm(initPiece.attr_cls.rhythm);\r\n  }, [])\r\n\r\n  const composeFunc = async () => {\r\n    setIsComposing(true);\r\n    let composedPiece = await composeRequest(\r\n      refId, tempo, {\r\n        polyph: polyph,\r\n        rhythm: rhythm\r\n      }\r\n    );\r\n    setComposedNotes(composedPiece.notes);\r\n    setIsComposing(false);\r\n    setHasComposed(true);\r\n  }\r\n\r\n  /***** Canvas render *****/\r\n  const [ canvasRef, canvasWidth, canvasHeight, nGrids, nPitch, gridSize] = useCanvas();\r\n  const [ gridCanvasRef ] = useGridCanvas();\r\n\r\n  const midi2Show = e => {\r\n    return {\r\n      start: Math.floor(e.start_tick/120),\r\n      key: e.key - 32, // [myRef]\r\n      gain: e.velocity/128,\r\n      duration: Math.floor(e.duration/120)\r\n    }\r\n  }\r\n\r\n  useEffect( async () => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let notes = initNotes.map(midi2Show);\r\n    myDraw(nGrids, nPitch, gridSize, notes, ctx);\r\n  }, [initNotes, canvasHeight, canvasWidth])\r\n\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Layout>\r\n          <Content style={{ overflow: 'auto', width:canvasWidth, height:canvasHeight}}>\r\n              <div id=\"canvas-container\" style={{width:canvasWidth, height:canvasHeight}}>\r\n                <Canvas\r\n                  forwardedRef={canvasRef}\r\n                  width={canvasWidth}\r\n                  height={canvasHeight}\r\n                />\r\n                <GridCanvas\r\n                  forwardedRef={gridCanvasRef}\r\n                  width={canvasWidth}\r\n                  height={canvasHeight}\r\n                />\r\n              </div>\r\n          </Content>\r\n          <Layout>\r\n            <Sider style={{ overflow: 'auto'}}>\r\n              <div id=\"play\">\r\n                <button className=\"my-button1\" onClick={playButton(\"i\")}>\r\n                  {isPlayingInit? \r\n                    <PauseCircleFilled title=\"Pause\"/> : \r\n                    <PlayCircleFilled title=\"Play\"/>}\r\n                </button>\r\n              </div>\r\n            </Sider>\r\n            <Content style={{ overflow: 'auto'}}>\r\n              <ButtonList \r\n                toggleFunc={toggleFunc} lockFunc={rLockFunc} \r\n                locked={rLock} attrData={rhythm}\r\n                attrType=\"rhythm\"/>\r\n              <ButtonList \r\n                toggleFunc={toggleFunc} lockFunc={pLockFunc}\r\n                locked={pLock} attrData={polyph}\r\n                attrType=\"polyph\"/>\r\n            </Content>\r\n            <Sider style={{ overflow: 'auto'}}>\r\n              <div id=\"request\">\r\n                <button className=\"my-button3\" onClick={composeFunc} disabled={isComposing}>\r\n                  {hasComposed? \r\n                    <SlidersFilled title=\"Reompose\"/> : \r\n                    <SlidersFilled title=\"Compose\"/>}\r\n                </button>\r\n              </div>\r\n            </Sider>\r\n          </Layout>\r\n        </Layout>\r\n        \r\n        {/* <div id=\"playComposed\">\r\n          <button onClick={playButton(\"c\")} disabled={!hasComposed}>\r\n            {isPlayingComposed? \"Stop\" : \"Play Composed Music\"}\r\n          </button>\r\n        </div> */}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\reportWebVitals.js",[],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\buttonList.js",["44"],"import 'antd/dist/antd.css';\r\nimport { Switch, Typography } from 'antd';\r\nimport {\r\n  UnlockOutlined,\r\n  LockOutlined,\r\n  RightCircleOutlined,\r\n  LeftCircleOutlined,\r\n} from '@ant-design/icons';\r\nconst { Text, Link } = Typography;\r\n\r\nfunction ButtonList(props){\r\n\r\n  return(\r\n    <div className=\"button-list\">\r\n      {props.attrData.map((elem, index) => (\r\n        <div key={`${props.attrType[0]}_${index}`}>\r\n          {(index === 0)? \r\n            <>\r\n              <Switch\r\n                checkedChildren={<UnlockOutlined />}\r\n                unCheckedChildren={<LockOutlined />}\r\n                defaultChecked={props.locked} \r\n                onClick={props.lockFunc}\r\n                style={{visibility: (index === 0)? 'visible' : 'hidden'}}/>\r\n              <Text keyboard strong>{props.attrType}</Text>\r\n            </>\r\n             :\r\n            <div/>}\r\n          <button \r\n            className=\"my-button2\"\r\n            onClick={props.toggleFunc(index, -1, props.attrType)}\r\n            disabled={(elem <= 0) || (props.locked && index !== 0)}>\r\n              <LeftCircleOutlined title=\"Down\"/>\r\n          </button>\r\n          <Text strong code\r\n            type={\r\n              elem>5?\r\n                \"danger\":elem<2?\r\n                  \"success\":\"warning\"\r\n            }\r\n          >{Math.max(Math.min(elem, 7), 0)}</Text>\r\n          <button\r\n            className=\"my-button2\"\r\n            onClick={props.toggleFunc(index, +1, props.attrType)}\r\n            disabled={(elem >= 7) || (props.locked && index !== 0)}>\r\n              <RightCircleOutlined title=\"Up\"/>\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>   \r\n  )\r\n}\r\n\r\nexport default ButtonList","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\axios.js",[],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\useCanvas.js",["45","46","47"],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\useGridCanvas.js",["48"],"import React, { useEffect, useRef } from 'react';\nimport { useWindowSize } from './useCanvas.js';\n\n/* ========================================================================== */\nconst n_grids_per_bar = 16;\nconst n_bars = 8;\nconst n_grids = n_grids_per_bar * n_bars; // number of grids in horizontal direction\nconst n_pitch = 64; // number of grids in vertical direction\n/* ========================================================================== */\n\nexport function draw(ctx, canvasWidth, canvasHeight, gridSize){\n  const halfGridSize = Math.floor(gridSize/2);\n  ctx.save();\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n  \n  for(let i = 0; i < canvasHeight; i++){\n    let flag = Math.floor(i/halfGridSize)%12;\n    ctx.restore();\n    ctx.globalAlpha = 1;\n    if(flag === 1 || flag === 3 || flag === 6 || flag === 8 || flag === 10){\n      ctx.fillStyle = 'rgba(30, 30, 30, 1)';\n      ctx.fillRect(0, i, canvasWidth, 1);\n    }\n    else{\n      ctx.fillStyle = 'rgba(60, 60, 60, 1)';\n      ctx.fillRect(0, i, canvasWidth, 1);\n    }\n  }\n\n  ctx.beginPath();\n  for (let i = 0; i < canvasWidth; i += gridSize) {\n    ctx.lineWidth = (1.0+((i/gridSize%n_grids_per_bar)===0)*5)*0.1;\n    if ((i/gridSize%n_grids_per_bar)===0)\n      ctx.strokeStyle = 'gray';\n    else\n      continue; //ctx.strokeStyle = '#717171';\n    ctx.beginPath();\n    ctx.moveTo(i + 0.5, 0);\n    ctx.lineTo(i + 0.5, canvasHeight);\n    ctx.stroke();\n  }\n  for (let i = 0; i < canvasHeight; i += halfGridSize) {\n    ctx.lineWidth = (1.0+((i/halfGridSize%12)===4)*5)*0.1; // [myRef]\n    if ((i/halfGridSize%12)===4)\n      ctx.strokeStyle = 'gray';\n    else\n      continue; //ctx.strokeStyle = '#717171';'#F5927E'\n    ctx.beginPath();\n    ctx.moveTo(0, i + 0.5);\n    ctx.lineTo(canvasWidth, i + 0.5);\n    ctx.stroke();\n  }\n  ctx.restore();\n};\n\nexport function useGridCanvas(){\n    const canvasRef = useRef(null);\n    let [window_width, window_height] = useWindowSize();\n    // if (window_width < 1000)\n    //   window_width = 1000;\n    const canvasWidth = window_width - window_width % n_grids;\n    const canvasHeight = Math.floor(canvasWidth / n_grids) * n_pitch;\n    const gridSize = Math.floor(canvasWidth / n_grids);\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n\n        draw(ctx, canvasWidth, canvasHeight, gridSize);\n    }, [canvasWidth, canvasHeight, gridSize]);\n\n    return [ canvasRef ];\n}\n\nexport function GridCanvas(props) {\n  return (\n    <canvas\n      className=\"grid-canvas my-canvas\"\n      ref={props.forwardedRef}\n      width={props.width}\n      height={props.height}\n    />\n  )\n}\n\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":17},{"ruleId":"53","severity":1,"message":"57","line":4,"column":21,"nodeType":"55","messageId":"56","endLine":4,"endColumn":27},{"ruleId":"53","severity":1,"message":"58","line":17,"column":9,"nodeType":"55","messageId":"56","endLine":17,"endColumn":15},{"ruleId":"53","severity":1,"message":"59","line":17,"column":26,"nodeType":"55","messageId":"56","endLine":17,"endColumn":32},{"ruleId":"60","severity":1,"message":"61","line":72,"column":14,"nodeType":"62","endLine":75,"endColumn":4},{"ruleId":"60","severity":1,"message":"61","line":116,"column":14,"nodeType":"62","endLine":125,"endColumn":4},{"ruleId":"60","severity":1,"message":"61","line":153,"column":14,"nodeType":"62","endLine":158,"endColumn":4},{"ruleId":"60","severity":1,"message":"63","line":158,"column":6,"nodeType":"64","endLine":158,"endColumn":44,"suggestions":"65"},{"ruleId":"53","severity":1,"message":"66","line":9,"column":15,"nodeType":"55","messageId":"56","endLine":9,"endColumn":19},{"ruleId":"53","severity":1,"message":"67","line":1,"column":27,"nodeType":"55","messageId":"56","endLine":1,"endColumn":36},{"ruleId":"53","severity":1,"message":"68","line":31,"column":9,"nodeType":"55","messageId":"56","endLine":31,"endColumn":16},{"ruleId":"53","severity":1,"message":"69","line":55,"column":24,"nodeType":"55","messageId":"56","endLine":55,"endColumn":37},{"ruleId":"53","severity":1,"message":"69","line":58,"column":24,"nodeType":"55","messageId":"56","endLine":58,"endColumn":37},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'PianoRoll' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'Header' is assigned a value but never used.","'Footer' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'canvasRef', 'gridSize', 'nGrids', and 'nPitch'. Either include them or remove the dependency array.","ArrayExpression",["72"],"'Link' is assigned a value but never used.","'useEffect' is defined but never used.","'colors1' is assigned a value but never used.","'window_height' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [initNotes, canvasHeight, canvasWidth, canvasRef, nGrids, nPitch, gridSize]",{"range":"75","text":"76"},[4825,4863],"[initNotes, canvasHeight, canvasWidth, canvasRef, nGrids, nPitch, gridSize]"]