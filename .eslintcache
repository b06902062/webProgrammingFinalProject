[{"/home/slseanwu/webProgrammingFinalProject/src/index.js":"1","/home/slseanwu/webProgrammingFinalProject/src/reportWebVitals.js":"2","/home/slseanwu/webProgrammingFinalProject/src/App.js":"3","/home/slseanwu/webProgrammingFinalProject/src/recommendationPage.js":"4","/home/slseanwu/webProgrammingFinalProject/src/buttonList.js":"5","/home/slseanwu/webProgrammingFinalProject/src/useCanvas.js":"6","/home/slseanwu/webProgrammingFinalProject/src/useGridCanvas.js":"7","/home/slseanwu/webProgrammingFinalProject/src/useProgressCanvas.js":"8","/home/slseanwu/webProgrammingFinalProject/src/axios.js":"9","/home/slseanwu/webProgrammingFinalProject/src/customButtonStyle.js":"10"},{"size":500,"mtime":1611050774172,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1611050774172,"results":"13","hashOfConfig":"12"},{"size":16969,"mtime":1611108860223,"results":"14","hashOfConfig":"12"},{"size":14343,"mtime":1611107707631,"results":"15","hashOfConfig":"12"},{"size":1973,"mtime":1611050774172,"results":"16","hashOfConfig":"12"},{"size":2700,"mtime":1611063227714,"results":"17","hashOfConfig":"12"},{"size":2430,"mtime":1611050774172,"results":"18","hashOfConfig":"12"},{"size":2190,"mtime":1611063227714,"results":"19","hashOfConfig":"12"},{"size":2294,"mtime":1611107707631,"results":"20","hashOfConfig":"12"},{"size":301,"mtime":1611050774172,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1clw3qm",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/slseanwu/webProgrammingFinalProject/src/index.js",[],["49","50"],"/home/slseanwu/webProgrammingFinalProject/src/reportWebVitals.js",[],"/home/slseanwu/webProgrammingFinalProject/src/App.js",["51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72"],"import Soundfont from 'soundfont-player'\nimport './App.css'\nimport { useEffect, useRef, useState } from 'react';\nimport ButtonList from './buttonList.js'\nimport RecPage from './recommendationPage.js'\nimport { \n  getInitPiece, \n  composeRequest,\n  downloadSongRequest,\n  rateSongRequest,\n  getRecommendationsRequest\n} from './axios'\nimport { useCanvas, Canvas, myDraw } from './useCanvas.js';\nimport { useGridCanvas, GridCanvas } from './useGridCanvas.js';\nimport { useProgressCanvas, ProgressCanvas, progressDraw, stopProgress } from './useProgressCanvas.js';\n\nimport 'antd/dist/antd.css';\nimport {\n  PlayCircleFilled,\n  PauseCircleFilled,\n  SlidersFilled,\n  RedoOutlined,\n  ArrowRightOutlined,\n  ArrowLeftOutlined,\n  LoadingOutlined,\n  DownloadOutlined,\n  LikeOutlined,\n  LikeFilled,\n  DislikeOutlined,\n  DislikeFilled,\n  CommentOutlined,\n  StarFilled,\n} from '@ant-design/icons';\nimport { Space, Divider, Typography, Spin } from 'antd';\n// import { Button } from '@material-ui/core';\n// import { ActionButton } from './customButtonStyle.js'\nimport { \n  PlayArrowRounded,\n  StopRounded,\n  ArrowBackRounded,\n  MusicNoteRounded\n} from '@material-ui/icons'\n\nconst { Title, Text } = Typography;\n\n\nlet ac, pianoPlayer, timeOutButt, timeOutButt2=[], timeOutButt3=[];\nfunction App() {\n  /***** Result Page *****/\n  const [originPage, setOriginPage] = useState(true)\n  const [recommendationPage, setRecommendationPage] = useState(false)\n  const [recommandProps, setRecommendationProps] = useState()\n\n  const requestRecommendations = async()=>{\n    let result = await getRecommendationsRequest(refId, composedId);\n    //console.log(result.n_results, result.composed_id, result.recommended_songs)\n    setRecommendationProps(result)\n    setRecommendationPage(true)\n  }\n\n  /***** Audio Playing *****/\n  const [initNotes, setInitNotes] = useState([])\n  const [composedNotes, setComposedNotes] = useState([])\n  const [isPlayingInit, setIsPlayingInit] = useState(false)\n  const [isPlayingComposed, setIsPlayingComposed] = useState(false)\n\n  const tick2Sec = (tic, tpb = 480) => {\n    return parseFloat(60*tic/tempo/tpb);\n  }\n  \n  const midi2Play = e => {\n    return {\n      time: tick2Sec(e.start_tick),\n      note: e.key,\n      gain: 5*e.velocity/128,\n      duration: tick2Sec(e.duration)\n    }\n  }\n\n  const midi2Progress = e => {\n    return {\n      //for clock\n      time: tick2Sec(e.start_tick),\n      duration: tick2Sec(e.duration),\n      \n      key: e.key - 20, // [myRef]\n      gain: e.velocity/128,\n      //for draw\n      start: Math.floor(e.start_tick/120),\n      end: Math.floor(e.duration/120)\n    }\n  }\n\n  const myPlayer = (player, notes, setFunc) => {\n    return new Promise((resolve) => {\n      const noteSched = notes.map(midi2Play)\n      const noteProgress = notes.map(midi2Progress)\n      const timeoutSec = 1000 * (noteSched[ noteSched.length - 1 ].time + noteSched[ noteSched.length - 1 ].duration);\n\n      player.schedule(ac.currentTime, noteSched)\n      progressDraw(noteProgress, timeOutButt2, timeOutButt3);\n      \n      timeOutButt = setTimeout(() => {\n       setFunc(false)\n       progressClear()\n       resolve()\n      }, timeoutSec)\n    })\n  }\n\n  const playButton = (tag) => {\n    return async() => {\n      const isPlaying = (tag === \"i\")? isPlayingInit : isPlayingComposed\n      const notes = (tag === \"i\")? initNotes : composedNotes\n      const setFunc = (tag === \"i\")?\n        ele => {setIsPlayingInit(ele)} :\n        ele => {setIsPlayingComposed(ele)}\n\n      if(isPlaying){\n        pianoPlayer.stop()\n        setFunc(false)\n\n        clearTimeout(timeOutButt)\n        timeOutButt2.forEach(e=>{clearTimeout(e)})\n        timeOutButt3.forEach(e=>{clearTimeout(e)})\n        progressClear()\n      }\n      else{\n        setFunc(true)\n        await myPlayer(pianoPlayer, notes, setFunc)\n      }\n    }\n  }\n\n  useEffect( async () => {\n    ac = new window.AudioContext();\n    pianoPlayer = await Soundfont.instrument(ac, 'acoustic_grand_piano', { soundfont: 'MusyngKite' });\n  }, [])\n\n  /***** Button  List  React *****/\n  const [polyph, setPolyph] = useState([0, 0, 0, 0, 0, 0, 0, 0])\n  const [rhythm, setRhythm] = useState([0, 0, 0, 0, 0, 0, 0, 0])\n  const [composedPolyph, setComposedPolyph] = useState([0, 0, 0, 0, 0, 0, 0, 0])\n  const [composedRhythm, setComposedRhythm] = useState([0, 0, 0, 0, 0, 0, 0, 0])\n  const [defaultPR, setDefaultPR] = useState([])\n  const [pLock, setPLock] = useState(true)\n  const [rLock, setRLock] = useState(true)\n  const [isLike, setIsLike] = useState(false)\n  const [isDisLike, setIsDisLike] = useState(false)\n  const [likeCount, setLikeCount] = useState(0)\n  const [disLikeCount, setDisLikeCount] = useState(0)\n\n  const pressLikeButt = async(flag)=>{\n    let deltaLike = 0, deltaDisLike = 0;\n    if(flag){//press like button\n      deltaLike = isLike? -1 : 1;\n      deltaDisLike = isDisLike? -1 : 0;\n      setIsLike(!isLike)\n      setIsDisLike(false)\n    }\n    else{\n      deltaLike = isLike? -1 : 0;\n      deltaDisLike = isDisLike? -1 : 1;\n      setIsDisLike(!isDisLike)\n      setIsLike(false)\n    }\n    //console.log(composedId, deltaLike, deltaDisLike)\n    let result = await rateSongRequest(composedId, deltaLike, deltaDisLike)\n    //console.log(result);\n    setLikeCount(result.likes)\n    setDisLikeCount(result.dislikes)\n  }\n\n  const defaultToggleFunc = () => {\n    setPolyph(defaultPR[0])\n    setRhythm(defaultPR[1])\n  }\n\n  const toggleFunc = (index, op, typ) => {\n    return (() => {\n      (typ === \"polyph\")?\n        pLock?\n          setPolyph(polyph.map(ele => (ele + op))) :\n          setPolyph(polyph.map((ele, ind) => ((ind === index)? ele + op : ele)))\n        :\n        rLock?\n          setRhythm(rhythm.map(ele => (ele + op))) :\n          setRhythm(rhythm.map((ele, ind) => ((ind === index)? ele + op : ele)))\n    })\n  }\n\n  const pLockFunc = () => {\n    if(pLock){\n      setPolyph(polyph.map(ele => Math.max(Math.min(ele, 7), 0)))\n    }\n    setPLock(!pLock) \n  }\n\n  const rLockFunc = () => {\n    if(rLock){\n      setRhythm(rhythm.map(ele => Math.max(Math.min(ele, 7), 0)))\n    }\n    setRLock(!rLock)\n  }\n\n  /***** Webserver requests *****/\n  const [hasRequested, setHasRequested] = useState(false)\n  const [refId, setRefId] = useState(-1)\n  const [requestId, setRequestId] = useState(-1)\n  const [composedId, setComposedId] = useState('');\n  const [tempo, setTempo] = useState(119)\n  const [isComposing, setIsComposing] = useState(false)\n  const [hasComposed, setHasComposed] = useState(false)\n\n  useEffect( async () => {\n    if(!hasRequested){\n      ac = new window.AudioContext();\n      pianoPlayer = await Soundfont.instrument(ac, 'acoustic_grand_piano', { soundfont: 'MusyngKite' });\n      //console.log('before calling getinit', requestId)\n      let initPiece = await getInitPiece(requestId);\n      setTempo(initPiece.tempo);\n      setRefId(initPiece.ref_id);\n      setRequestId(initPiece.ref_id);\n      setInitNotes(initPiece.notes);\n      setPolyph(initPiece.attr_cls.polyph);\n      setRhythm(initPiece.attr_cls.rhythm);\n      setDefaultPR([initPiece.attr_cls.polyph, initPiece.attr_cls.rhythm])\n      setHasRequested(true);\n    }\n  }, [hasRequested])\n\n  const composeFunc = async () => {\n    setIsComposing(true);\n    let composedPiece = await composeRequest(\n      refId, tempo, {\n        polyph: polyph.map(e=>Math.max(Math.min(e, 7), 0)),\n        rhythm: rhythm.map(e=>Math.max(Math.min(e, 7), 0))\n      }\n    );\n    setComposedNotes(composedPiece.notes);\n    setComposedRhythm(composedPiece.rhythm);\n    setComposedPolyph(composedPiece.polyph);\n    setComposedId(composedPiece.composed_id);\n    setIsComposing(false);\n    setHasComposed(true);\n    setIsLike(false)\n    setIsDisLike(false)\n  }\n\n  /***** Canvas render *****/\n  const [ canvasRef, canvasWidth, canvasHeight, gridSize, nGrids, nPitch, n_bars, n_grids_per_bar, window_width, window_height] = useCanvas();\n  const [ gridCanvasRef ] = useGridCanvas(recommendationPage);\n  const [ progressCanvasRef, progressDraw, progressClear] = useProgressCanvas();\n\n  const midi2Show = e => {\n    return {\n      start: Math.floor(e.start_tick/120),\n      key: e.key - 20, // [myRef]\n      gain: e.velocity/128,\n      duration: Math.floor(e.duration/120)\n    }\n  }\n\n  useEffect( async () => {\n    if(originPage){\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      let notes = initNotes.map(midi2Show);\n      myDraw(canvasHeight, nGrids, nPitch, gridSize, notes, ctx);\n    }\n    else if(!recommendationPage){\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      let notes = composedNotes.map(midi2Show);\n      myDraw(canvasHeight, nGrids, nPitch, gridSize, notes, ctx);\n    }\n  }, [initNotes, canvasHeight, canvasWidth, originPage])\n\n  const passedRhythm = (originPage)? rhythm : composedRhythm;\n  const passedPolyph = (originPage)? polyph : composedPolyph;\n\n  const initEverything = (flag)=>{\n    if(flag){\n      setRequestId(-1)\n    }\n    setInitNotes([])\n    setRefId(-1)\n    setPolyph(polyph.map(e=>0))\n    setRhythm(rhythm.map(e=>0))\n    setTempo(119)\n    setHasComposed(false)\n    setIsLike(false)\n    setIsDisLike(false)\n    setOriginPage(true)\n    setHasRequested(false)\n    setRecommendationPage(false)\n  }\n\n\n  useEffect( () => {\n    if(requestId!==refId){\n      let req = parseInt(requestId, 10)\n      if(Number.isInteger(req) && req>=0 && req<=99){\n        setRequestId(req)\n        initEverything(false)\n      }\n      else{\n        setRequestId(refId)\n      }\n    }\n  }, [requestId])\n\n\n  const buttonSize = Math.min(Math.floor(canvasHeight*0.12), 50)\n  \n  return (\n    <div className=\"App\">\n      <body className=\"App-header\">\n        {recommendationPage?\n          <RecPage \n            id={recommandProps.composed_id}\n            recommendations={recommandProps.recommended_songs}\n            composedSong={{\n              tempo:tempo, notes:composedNotes, composed_id:recommandProps.composed_id,\n              dislikes:disLikeCount, likes:likeCount, downloads:0, ranking:-1\n            }}\n            n_results={recommandProps.n_results}\n            goback={()=>initEverything(true)}\n            likeStatus={isLike}\n          />\n          :\n          <>\n            <div style={{position: \"relative\", width:window_width, height:(canvasHeight+0.1*window_height)}}>\n              {originPage?\n                <div id=\"info-container\" style={{overflow:'hidden', width:0.8 * (window_width - canvasWidth), height:canvasHeight}}>\n                  <div className='id-container'>\n                    <Text strong style={{fontSize:buttonSize*0.6,  color:'cornflowerblue'}}>Original</Text>\n                    <br/>\n                    <Text strong style={{fontSize:buttonSize*0.5, color:'LightBlue'}}> Song </Text>\n                    <Text strong editable={(refId === -1)? {onChange:setRequestId, editing:false} : {onChange:setRequestId, tooltip:'type 0~99 to get another song'}}\n                      style={{fontSize:buttonSize*0.5, color:'LightBlue'}}> {(refId === -1)? '' : `#${refId}`} </Text>\n                  </div>\n                  {hasRequested?\n                  <>\n                    <div id=\"play\">\n                      <button className=\"my-button1\" style={{fontSize: buttonSize ,color: isPlayingInit? 'lightpink':'aquamarine'}} \n                        onClick={playButton(\"i\")} disabled={!hasRequested}>\n                        {isPlayingInit? \n                        <PauseCircleFilled title=\"Pause\"/> : \n                        <PlayCircleFilled title=\"Play\"/>}\n                      </button>\n                    </div>\n                    <div id=\"back2default\">\n                      <button className=\"my-button1 color3\" style={{fontSize: buttonSize}} onClick={defaultToggleFunc} disabled={!hasRequested}>\n                        <RedoOutlined title=\"Set Tuners to Default\"/>\n                      </button>\n                    </div>\n                    <div id=\"request\">\n                      <button \n                        className={isComposing ? \"my-button1 color1 spinner\" : \"my-button1 color1\"}\n                        style={{fontSize: buttonSize}}\n                        onClick={composeFunc} \n                        disabled={isComposing||!hasRequested}>\n                        <MusicNoteRounded style={{fontSize: buttonSize}} titleAccess={isComposing? \"Composing...\" : hasComposed? \"Recompose\" : \"Compose\"}/>\n                      </button>\n                    </div>\n                  </>\n                  :\n                  <>\n                    <div style={{height:buttonSize}}/>\n                    <Spin tip=\"Loading...\"/>\n                  </>}\n                  \n                  { hasComposed && !isComposing &&\n                    <div id=\"nextpage\">\n                      <button className=\"my-button1 color2\"\n                        onClick={()=>setOriginPage(false)}\n                        style={{fontSize: buttonSize}}\n                        disabled={isPlayingInit}>\n                        <ArrowRightOutlined title=\"See My Song\"/>\n                      </button>\n                    </div>\n                  }\n                </div>\n                :\n                <div id=\"info-container\" style={{overflow:'hidden', width:0.8 * (window_width - canvasWidth), height:canvasHeight}}>\n                  <div className='id-container'>\n                    <Text strong style={{fontSize:buttonSize*0.6,  color:'CornflowerBlue'}}>Yours</Text>\n                    <br/>\n                    <Text strong style={{fontSize:buttonSize*0.5,  color:'LightBlue'}}>Song&nbsp;{(refId == -1)? '' : `#${refId}`}</Text>\n                  </div>\n                  <div id=\"play\">\n                    <button className=\"my-button1\" style={{fontSize: buttonSize, color: isPlayingComposed? 'lightpink':'aquamarine'}} onClick={playButton(\"c\")}>\n                      {(isPlayingComposed)? \n                      <PauseCircleFilled title=\"Pause\"/> : \n                      <PlayCircleFilled title=\"Play\"/>}\n                    </button>\n                  </div>\n                  <Space>\n                    <button \n                      className=\"my-button1 color3\" \n                      style={{fontSize: buttonSize, color: isLike? 'greenyellow' : 'grey'}}\n                      onClick={() => pressLikeButt(true)}>\n                      {isLike? <LikeFilled title='Cancel Like'/> : <LikeOutlined title='Like'/>}\n                    </button>\n                    <button \n                      className=\"my-button1 color3\"\n                      style={{fontSize: buttonSize, color: isDisLike? 'red' : 'grey'}}\n                      onClick={() => pressLikeButt(false)}>\n                      {isDisLike? <DislikeFilled title='Cancel Dislike'/> : <DislikeOutlined title='Dislike'/>}\n                    </button>\n                  </Space>\n                  <div id=\"recommand\">\n                    <button \n                      className=\"my-button1 color1\"\n                      style={{fontSize: buttonSize}}\n                      onClick={() => requestRecommendations()}\n                      disabled={!(isLike||isDisLike) || isPlayingComposed}>\n                      <StarFilled title={(isLike||isDisLike)?\"Recommendations\":\"Like or dislike to get recommendations :)\"}/>\n                    </button>\n                  </div>\n                  <div id=\"prevpage\">\n                    <button \n                      className=\"my-button1 color2\"\n                      style={{fontSize: buttonSize}}\n                      onClick={()=>setOriginPage(true)}\n                      disabled={isPlayingComposed}\n                    >\n                      <ArrowLeftOutlined title=\"See Original Song\"/>\n                    </button>\n                  </div>\n                </div>           \n              }\n            <Canvas\n              forwardedRef={canvasRef}\n              width={canvasWidth}\n              height={canvasHeight}\n              />\n            <GridCanvas\n              forwardedRef={gridCanvasRef}\n              width={canvasWidth}\n              height={canvasHeight}\n              />\n            <ProgressCanvas\n              forwardedRef={progressCanvasRef}\n              width={canvasWidth}\n              height={canvasHeight}\n            />\n            </div>\n            <Space direction='vertical' style={{width:window_width}}>\n              <ButtonList \n                toggleFunc={toggleFunc} lockFunc={rLockFunc} \n                locked={rLock} attrData={passedRhythm}\n                windowWidth={window_width} canvasWidth={canvasWidth}\n                nowAPage={originPage}\n                attrType=\"rhythm\"/>\n              <ButtonList \n                toggleFunc={toggleFunc} lockFunc={pLockFunc}\n                locked={pLock} attrData={passedPolyph}\n                windowWidth={window_width} canvasWidth={canvasWidth}\n                nowAPage={originPage}\n                attrType=\"polyph\"/>\n            </Space>\n          </>\n        }\n      </body>\n    </div>\n  );\n}\n\nexport default App;","/home/slseanwu/webProgrammingFinalProject/src/recommendationPage.js",["73","74","75","76","77","78","79","80","81","82","83"],"import Soundfont from 'soundfont-player'\nimport './App.css'\nimport { useEffect, useRef, useState } from 'react';\nimport { \n  downloadSongRequest,\n  rateSongRequest\n} from './axios'\nimport { useCanvas, Canvas, myDraw } from './useCanvas.js';\n\nimport 'antd/dist/antd.css';\nimport {\n  PlayCircleFilled,\n  PauseCircleFilled,\n  DownloadOutlined,\n  LikeOutlined,\n  LikeFilled,\n  DislikeOutlined,\n  DislikeFilled,\n  HomeOutlined\n} from '@ant-design/icons';\nimport { Space, Divider, Typography, Spin } from 'antd';\nimport { Button } from '@material-ui/core';\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\nimport { ActionButton } from './customButtonStyle'\n\nconst { Title, Text } = Typography;\n\nlet ac, pianoPlayer, timeOutButt;\nfunction RecPage(props) {\n  /***** Audio playing *****/\n  const [isPlaying, setIsPlaying] = useState(new Array(props.n_results+1).fill(false))\n  const [isAnyonePlaying, setIsAnyonePlaying] = useState(false)\n  \n  const midi2Play = (tempo)=>{\n    const tick2Sec = (tic, tpb = 480) => {\n      return parseFloat(60*tic/tempo/tpb);\n    }\n    \n    return  (e => {\n      return {\n        time: tick2Sec(e.start_tick),\n        note: e.key,\n        gain: 5*e.velocity/128,\n        duration: tick2Sec(e.duration)\n      }\n    })\n  }\n\n  const myPlayer = (player, notes, tempo, index) => {\n    return new Promise((resolve) => {\n      const noteSched = notes.map(midi2Play(tempo))\n      const timeoutSec = 1000 * (noteSched[ noteSched.length - 1 ].time + noteSched[ noteSched.length - 1 ].duration);\n\n      player.schedule(ac.currentTime, noteSched)\n      \n      timeOutButt = setTimeout(() => {\n       setIsPlaying(isPlaying.map((ele, ind)=>(ind === index? false : ele)))\n       setIsAnyonePlaying(false)\n       resolve()\n      }, timeoutSec)\n    })\n  }\n\n  const play = async(index)=>{\n    const notes = (index === 0)? props.composedSong.notes : props.recommendations[index-1].notes\n    const setFunc = ()=>{setIsPlaying(isPlaying.map((ele, ind)=>(ind === index? !ele : ele)))}\n\n    if(isPlaying[index]){\n      pianoPlayer.stop()\n      setFunc()\n      setIsAnyonePlaying(false)\n      clearTimeout(timeOutButt)\n    }\n    else{\n      setFunc()\n      setIsAnyonePlaying(true)\n      await myPlayer(pianoPlayer, notes, index===0? props.composedSong.tempo : props.recommendations[index-1].tempo, index)\n    }\n  }\n\n  useEffect( async () => {\n    ac = new window.AudioContext();\n    pianoPlayer = await Soundfont.instrument(ac, 'acoustic_grand_piano', { soundfont: 'MusyngKite' });\n  }, [])\n\n  /***** Webserver request *****/\n  const [isDownloading, setIsDownloading] = useState(new Array(props.n_results+1).fill(false))\n  const [isLike, setIsLike] = useState(new Array(props.n_results).fill(false))\n  const [isDisLike, setIsDisLike] = useState(new Array(props.n_results).fill(false))\n  const [likeCount, setLikeCount] = useState(props.recommendations.map(e=>(e.likes)))\n  const [disLikeCount, setDisLikeCount] = useState(props.recommendations.map(e=>(e.dislikes)))\n  const [downloadCount, setDownloadCount] = useState(props.recommendations.map(e=>(e.downloads)))\n\n  const downloadFunc = async (index) => {\n    setIsDownloading(isDownloading.map((ele, ind)=>(\n      (ind === index)? true: ele\n    )))\n    const id = index===0? props.id : props.recommendations[index-1].composed_id;\n    const songData = await downloadSongRequest(id, index)\n    setIsDownloading(isDownloading.map((ele, ind)=>(\n      (ind === index)? false: ele\n    )))\n    if(index!==0){\n      setDownloadCount(downloadCount.map((ele, ind)=>(\n        (ind === index-1)? ele+1: ele\n      )))\n    }\n  }\n\n  const pressLikeButt = async(ind, flag)=>{\n    let deltaLike = 0, deltaDisLike = 0;\n    if(flag){//press like button\n      deltaLike = isLike[ind]? -1 : 1;\n      deltaDisLike = isDisLike[ind]? -1 : 0;\n      setIsLike(isLike.map((e, i)=>(i===ind? !e:e)))\n      setIsDisLike(isDisLike.map((e, i)=>(i===ind? false:e)))\n    }\n    else{\n      deltaLike = isLike[ind]? -1 : 0;\n      deltaDisLike = isDisLike[ind]? -1 : 1;\n      setIsDisLike(isDisLike.map((e, i)=>(i===ind? !e:e)))\n      setIsLike(isLike.map((e, i)=>(i===ind? false:e)))\n    }\n\n    let result = await rateSongRequest(props.recommendations[ind].composed_id, deltaLike, deltaDisLike)\n    //console.log(result)\n    setLikeCount(likeCount.map((e, i)=>(i===ind? result.likes:e)))\n    setDisLikeCount(disLikeCount.map((e, i)=>(i===ind? result.dislikes:e)))\n  }\n\n  /***** Canvas render *****/\n  const [ myImg, setMyImg ] = useState([])\n  const [ canvasRef, canvasWidth, canvasHeight, gridSize, nGrids, nPitch ] = useCanvas(true);\n\n  const midi2Show = e => {\n    return {\n      start: Math.floor(e.start_tick/120),\n      key: e.key - 20, // [myRef]\n      gain: e.velocity/128,\n      duration: Math.floor(e.duration/120)\n    }\n  }\n\n  useEffect( async () => {\n    if(myImg.length === 0){\n      let newImageArray = [];\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      \n      for(let i = 0; i < props.n_results+1; i++){\n        let notes = (i===0)? props.composedSong.notes.map(midi2Show) : props.recommendations[i-1].notes.map(midi2Show);\n        myDraw(canvasHeight, nGrids, nPitch, gridSize, notes, ctx, true);\n        let img = canvas.toDataURL('image/png')\n        newImageArray[i] = img;\n      }\n\n      setMyImg(newImageArray)\n    }\n  })\n\n  return (\n    <Space direction='vertical' size={'large'}>\n      <Canvas\n        forwardedRef={canvasRef}\n        width={canvasWidth}\n        height={canvasHeight}\n        unDisplay\n        />\n      <div>\n        <div className='name-tag'>\n          Your Composition\n        </div>\n        <Space className='unit-container'\n          direction='horizontal' split={<Divider type='vertical'/>}>\n          <div id='play'>\n            <button className='my-button1' onClick={()=>play(0)}\n              style={{color: isAnyonePlaying&&!isPlaying[0]? 'grey' : isPlaying[0]? 'lightpink':'aquamarine'}}\n              disabled={isAnyonePlaying&&!isPlaying[0]}>\n              {isPlaying[0]?\n                <PauseCircleFilled title=\"Pause\"/> : \n                <PlayCircleFilled title=\"Play\"/>}\n            </button>\n          </div>\n          <div className='image-container' id='song-image'>\n            <img src={`${myImg[0]}`} style={{height:160, width:canvasWidth}}/>\n          </div>\n          <div>\n            <div style={{height:'36px'}}/>\n            <div id='like-status' className=\"my-button1\" \n              style={{ width: '80px', color: props.likeStatus?'greenyellow':'red'}}>\n              {props.likeStatus? <LikeFilled/> : <DislikeFilled/>}\n            </div>\n            <div style={{height:'36px'}}>\n              <Title strong style={{fontSize:'12px', color:'azure'}}>\n                {props.likeStatus? <>You<br/>Liked It</> : <>You<br/>Disliked It</>}\n              </Title>\n            </div>\n          </div>\n          <div id=\"download\">\n            <div style={{height:'36px'}}/>\n            <button \n              className={(isDownloading[0]) ? \"my-button1 button-move color1\" : \"my-button1 color1\"} \n              onClick={() => downloadFunc(0)}>\n              <DownloadOutlined/>\n            </button>\n            <div style={{height:'36px'}}>\n              <Title strong style={{fontSize:'12px', color:'azure'}}>Get<br/>Audio</Title>\n            </div>\n          </div>\n        </Space>\n      </div>\n      \n      <Space direction='vertical' className='recom-list'>\n        {props.recommendations.map((ele, ind)=>(\n          ind===0?\n          <div>\n            <div className='name-tag' style={{width:'36%'}}>\n              Recommended to You\n            </div>\n            <Space className='unit-container' direction='horizontal' split={<Divider type='vertical'/>}>\n              <div id='left'>\n                <div style={{height:'36px'}}>\n                  <Text strong style={{color:'aliceblue'}} >#{ind+1}</Text>\n                </div>\n                <div id='play'>\n                  <button className='my-button1' onClick={()=>play(ind+1)}\n                    style={{color: isAnyonePlaying&&!isPlaying[ind+1]? 'grey' : isPlaying[ind+1]? 'lightpink':'aquamarine'}}\n                    disabled={isAnyonePlaying&&!isPlaying[ind+1]}>\n                    {isPlaying[ind+1]?\n                      <PauseCircleFilled title=\"Pause\"/> : \n                      <PlayCircleFilled title=\"Play\"/>}\n                  </button>\n                </div>\n                <div style={{height:'36px'}}/>\n              </div>\n              <div className='image-container' id='song-image'>\n                <img src={`${myImg[ind+1]}`} style={{height:160, width:canvasWidth}}/>\n              </div>\n              <Space style={{ width: '80px'}}>\n                <div>\n                  <div style={{height:'36px'}}/>\n                  <button \n                    className=\"my-button1 color3\" \n                    style={{color: isLike[ind]? 'greenyellow':'grey'}}\n                    onClick={() => pressLikeButt(ind, true)}>\n                    {isLike[ind]? <LikeFilled title='Cancel Like'/> : <LikeOutlined title='Like'/>}\n                  </button>\n                  <div style={{height:'36px'}}>\n                    <Title strong style={{fontSize:'20px', color:'azure'}}>{likeCount[ind]}</Title>\n                  </div>\n                </div>\n                <div>\n                  <div style={{height:'36px'}}/>\n                  <button \n                    className=\"my-button1 color3\"\n                    style={{color: isDisLike[ind]? 'red' : 'grey'}}\n                    onClick={() => pressLikeButt(ind, false)}>\n                    {isDisLike[ind]? <DislikeFilled title='Cancel Dislike'/> : <DislikeOutlined title='Dislike'/>}\n                  </button>\n                  <div style={{height:'36px'}}>\n                    <Title strong style={{fontSize:'20px', color:'azure'}}>{disLikeCount[ind]}</Title>\n                  </div>\n                </div>\n              </Space>\n              <Space>\n              <div id=\"download\">\n                <div style={{height:'36px'}}/>\n                <button \n                  className={(isDownloading[ind+1]) ? \"my-button1 button-move color1\" : \"my-button1 color1\"} \n                  onClick={() => downloadFunc(ind+1)}\n                  disabled={!(isLike[ind]||isDisLike[ind])}>\n                  <DownloadOutlined title={!(isLike[ind]||isDisLike[ind])?'Rate to download':\"Download this song\"} />\n                </button>\n                <div style={{height:'36px'}}>\n                  <Title strong style={{fontSize:'20px', color:'azure'}}>{downloadCount[ind]}</Title>\n                </div>\n              </div>\n              </Space>\n            </Space>\n          </div>\n          :\n          <Space className='unit-container1' direction='horizontal' split={<Divider type='vertical'/>}>\n            <div id='left'>\n              <div style={{height:'36px'}}>\n                <Text strong style={{color:'aliceblue'}} >#{ind+1}</Text>\n              </div>\n              <div id='play'>\n                <button className='my-button1' onClick={()=>play(ind+1)}\n                  style={{color: isAnyonePlaying&&!isPlaying[ind+1]? 'grey' : isPlaying[ind+1]? 'lightpink':'aquamarine'}}\n                  disabled={isAnyonePlaying&&!isPlaying[ind+1]}>\n                  {isPlaying[ind+1]?\n                    <PauseCircleFilled title=\"Pause\"/> : \n                    <PlayCircleFilled title=\"Play\"/>}\n                </button>\n              </div>\n              <div style={{height:'36px'}}/>\n            </div>\n            <div className='image-container' id='song-image'>\n              <img src={`${myImg[ind+1]}`} style={{height:160, width:canvasWidth}}/>\n            </div>\n            <Space style={{ width: '80px'}}>\n              <div>\n                <div style={{height:'36px'}}/>\n                <button \n                  className=\"my-button1 color3\" \n                  style={{color: isLike[ind]? 'greenyellow':'grey'}}\n                  onClick={() => pressLikeButt(ind, true)}>\n                  {isLike[ind]? <LikeFilled title='Cancel Like'/> : <LikeOutlined title='Like'/>}\n                </button>\n                <div style={{height:'36px'}}>\n                  <Title strong style={{fontSize:'20px', color:'azure'}}>{likeCount[ind]}</Title>\n                </div>\n              </div>\n              <div>\n                <div style={{height:'36px'}}/>\n                <button \n                  className=\"my-button1 color3\"\n                  style={{color: isDisLike[ind]? 'red' : 'grey'}}\n                  onClick={() => pressLikeButt(ind, false)}>\n                  {isDisLike[ind]? <DislikeFilled title='Cancel Dislike'/> : <DislikeOutlined title='Dislike'/>}\n                </button>\n                <div style={{height:'36px'}}>\n                  <Title strong style={{fontSize:'20px', color:'azure'}}>{disLikeCount[ind]}</Title>\n                </div>\n              </div>\n            </Space>\n            <Space>\n            <div id=\"download\">\n              <div style={{height:'36px'}}/>\n              <button \n                className={(isDownloading[ind+1]) ? \"my-button1 button-move color1\" : \"my-button1 color1\"} \n                onClick={() => downloadFunc(ind+1)}\n                disabled={!(isLike[ind]||isDisLike[ind])}>\n                <DownloadOutlined title={!(isLike[ind]||isDisLike[ind])?'Rate to download':\"Download this song\"} />\n              </button>\n              <div style={{height:'36px'}}>\n                <Title strong style={{fontSize:'20px', color:'azure'}}>{downloadCount[ind]}</Title>\n              </div>\n            </div>\n            </Space>\n          </Space>\n        ))}\n      </Space>\n      <div className='home-button-container'>\n        {/* <button className='my-button1' onClick={props.goback}>\n          <HomeOutlined />\n        </button>\n        Home Page */}\n        <ActionButton\n          variant=\"contained\"\n          color=\"default\"\n          startIcon={<HomeRoundedIcon style={{fontSize: '30px'}}/>}\n          size=\"large\"\n          onClick={()=>{\n            pianoPlayer.stop()\n            setIsPlaying(isPlaying.map(e=>false))\n            setIsAnyonePlaying(false)\n            clearTimeout(timeOutButt)\n            props.goback()\n          }}\n        >\n          Back to Compose\n        </ActionButton>\n      </div>\n      \n    </Space>\n  );\n}\n\nexport default RecPage;","/home/slseanwu/webProgrammingFinalProject/src/buttonList.js",["84","85","86"],"import 'antd/dist/antd.css';\nimport { Button, Switch, Typography, Space, Divider } from 'antd';\nimport {\n  UnlockOutlined,\n  LockOutlined,\n  RightCircleOutlined,\n  LeftCircleOutlined,\n} from '@ant-design/icons';\nconst { Text } = Typography;\n\nfunction ButtonList(props){\n  return(\n    <div style={{display:'flex'}}>\n        <div style={{ width: 0.8*(props.windowWidth-props.canvasWidth) }}>\n          <Switch\n            size=\"small\"\n            checkedChildren={<UnlockOutlined />}\n            unCheckedChildren={<LockOutlined />}\n            defaultChecked={props.locked} \n            onClick={props.lockFunc}/>\n          {props.attrType === 'rhythm'?\n            <Text keyboard strong style={{color:'mediumslateblue'}}>Rhythm</Text> :\n            <Text keyboard strong style={{color:'MediumSeaGreen'}}>Polyph</Text> }\n        </div>\n        <div className=\"button-list\" style={{ width: props.canvasWidth}}>\n          {props.attrData.map((elem, index) => (\n            <div key={`${props.attrType[0]}_${index}`}>\n              <button \n                className=\"my-button2\"\n                onClick={props.toggleFunc(index, -1, props.attrType)}\n                disabled={(!props.nowAPage) || (elem <= 0) || (props.locked && index !== 0)}>\n                  <LeftCircleOutlined title=\"Down\"/>\n              </button>\n              <Text strong code //style={{fontSize:'16px'}}\n                type={\n                  elem>5?\n                    \"danger\":elem<2?\n                      \"success\":\"warning\"\n                }\n              >{Math.max(Math.min(elem, 7), 0)}</Text>\n              <button\n                className=\"my-button2\"\n                onClick={props.toggleFunc(index, +1, props.attrType)}\n                disabled={(!props.nowAPage) || (elem >= 7) || (props.locked && index !== 0)}>\n                  <RightCircleOutlined title=\"Up\"/>\n              </button>\n            </div>\n          ))}\n        </div>\n    </div>   \n  )\n}\n\nexport default ButtonList","/home/slseanwu/webProgrammingFinalProject/src/useCanvas.js",["87","88"],"import React, { useState, useEffect, useRef, useLayoutEffect } from 'react';\n\n/* ========================================================================== */\nconst n_grids_per_bar = 16;\nconst n_bars = 8;\nconst n_grids = n_grids_per_bar * n_bars; // number of grids in horizontal direction\nconst n_pitch = 88; // number of grids in vertical direction\n/* ========================================================================== */\n\nconst colors = [\n  'aqua', 'cornflowerblue', 'lightblue', 'lightcyan',\n  'darksalmon', 'coral', 'lightsalmon', 'orange',\n  'orangered', 'tomato', 'sandybrown', 'peru'\n]\nconst colors1 = [\n  'mediumorchid', 'paleturqoise', 'salmon', 'mediumseagreen',\n  'navajowhite', 'hotpink', 'gold', 'turqoise',\n  'violet', 'palegreen', 'tomato', 'skyblue'\n]\n\n/* Change window size when resizing window */\nexport function useWindowSize() {\n  const [size, setSize] = useState([0, 0]);\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  return size;\n}\n\nexport function myDraw(canvasHeight, n_grids, nPitch, gridSize, notes, ctx, fullcolor) {\n  const halfGridSize = Math.floor(gridSize/2);\n  ctx.restore();\n  ctx.beginPath();\n  ctx.clearRect(0, 0, gridSize * n_grids, halfGridSize * nPitch)\n\n  for(let note of notes){\n    if(note.key < 0 || note.key >= nPitch){\n      continue;\n    }\n    ctx.restore();\n    ctx.fillStyle = colors[note.key%12];\n    ctx.globalAlpha = fullcolor? 0.8 : note.gain;\n    ctx.fillRect(note.start * gridSize, canvasHeight - note.key * halfGridSize, (note.duration-0.5) * gridSize, halfGridSize);\n  }\n\n  ctx.closePath();\n}\n\nexport function useCanvas(flag = false){\n    const canvasRef = useRef(null);\n    let [window_width, window_height] = useWindowSize();\n    if(flag){\n      window_width = 800;\n      window_height = 450;\n    }\n    const canvasWidth = 0.8*window_width - 0.8*window_width % n_grids;\n    const canvasHeight = Math.floor(canvasWidth / n_grids) * n_pitch/2;\n    const gridSize = Math.floor(canvasWidth / n_grids);\n    //console.log(\"width, height, gridSize of drawCanvas:\", canvasWidth, canvasHeight, gridSize);\n    return [canvasRef, canvasWidth, canvasHeight, gridSize, n_grids, n_pitch, n_bars, n_grids_per_bar, window_width, window_height];\n}\n\nexport function Canvas(props) {\n  return (\n    <canvas\n      className=\"App-canvas my-canvas\"\n      ref={props.forwardedRef}\n      width={props.width}\n      height={props.height}\n      style={('unDisplay' in props)?\n        {display: 'none'}\n        :\n        {}\n      }\n    />\n  )\n}\n","/home/slseanwu/webProgrammingFinalProject/src/useGridCanvas.js",["89","90","91","92","93"],"import React, { useEffect, useRef } from 'react';\nimport { useCanvas } from './useCanvas.js';\n\nexport function draw(ctx, canvasWidth, canvasHeight, gridSize, n_grids_per_bar){\n  const halfGridSize = Math.floor(gridSize/2);\n  ctx.save();\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n  \n  for(let i = 0; i < canvasHeight; i++){\n    let flag = Math.floor(i/halfGridSize)%12;\n    ctx.restore();\n    ctx.globalAlpha = 1;\n    if(flag === 1 || flag === 3 || flag === 6 || flag === 8 || flag === 10){\n      ctx.fillStyle = 'rgba(30, 30, 30, 1)';\n      ctx.fillRect(0, i, canvasWidth, 1);\n    }\n    else{\n      ctx.fillStyle = 'rgba(60, 60, 60, 1)';\n      ctx.fillRect(0, i, canvasWidth, 1);\n    }\n  }\n\n  ctx.beginPath();\n  for (let i = 0; i < canvasWidth; i += gridSize) {\n    ctx.lineWidth = 1.2;\n    if ((i/gridSize%n_grids_per_bar)===0)\n      ctx.strokeStyle = 'white';\n    else\n      continue; //ctx.strokeStyle = '#717171';\n    ctx.beginPath();\n    ctx.moveTo(i + 0.5, 0);\n    ctx.lineTo(i + 0.5, canvasHeight);\n    ctx.stroke();\n  }\n  ctx.strokeStyle = 'white'\n  ctx.lineWidth = 1.2;    \n  ctx.beginPath();\n  ctx.moveTo(canvasWidth - 0.6, 0);\n  ctx.lineTo(canvasWidth - 0.6, canvasHeight);\n  ctx.stroke();\n\n  for (let i = 0; i < canvasHeight; i += halfGridSize) {\n    ctx.lineWidth = (1.0+((i/halfGridSize%12)===4)*5)*0.1; // [myRef]\n    if ((i/halfGridSize%12)===3)\n      ctx.strokeStyle = 'gray';\n    else\n      continue; //ctx.strokeStyle = '#717171';'#F5927E'\n    ctx.beginPath();\n    ctx.moveTo(0, i + 0.5);\n    ctx.lineTo(canvasWidth, i + 0.5);\n    ctx.stroke();\n  }\n  ctx.restore();\n};\n\nexport function useGridCanvas(recPage){\n    const canvasRef = useRef(null);\n    const [nullref, canvasWidth, canvasHeight, gridSize, n_grids, n_pitch, n_bars, n_grids_per_bar] = useCanvas();\n    useEffect(()=>{\n      if(!recPage){\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n        draw(ctx, canvasWidth, canvasHeight, gridSize, n_grids_per_bar);\n      }\n      \n    }, [canvasWidth, canvasHeight, gridSize, recPage]);\n\n    return [ canvasRef ];\n}\n\nexport function GridCanvas(props) {\n  return (\n    <canvas\n      className=\"grid-canvas my-canvas\"\n      ref={props.forwardedRef}\n      width={props.width}\n      height={props.height}\n    />\n  )\n}\n\n","/home/slseanwu/webProgrammingFinalProject/src/useProgressCanvas.js",["94","95","96","97"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useCanvas } from './useCanvas.js';\n\nexport function useProgressCanvas(){\n  const canvasRef = useRef(null);\n  const [ noneRef, canvasWidth, canvasHeight, gridSize, n_grids, nPitch] = useCanvas();\n  \n  function progressClear(){\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const halfGridSize = Math.floor(gridSize/2);\n    ctx.restore();\n    ctx.beginPath();\n    ctx.clearRect(0, 0, gridSize * n_grids, halfGridSize * nPitch);\n    ctx.closePath();\n  }\n\n  async function progressDraw(notes, timeOutButt, timeOutButt2) {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const halfGridSize = Math.floor(gridSize/2);\n    const colors = [\n      'aqua', 'cornflowerblue', 'lightblue', 'lightcyan',\n      'darksalmon', 'coral', 'lightsalmon', 'orange',\n      'orangered', 'tomato', 'sandybrown', 'peru'\n    ]\n    ctx.restore();\n    ctx.beginPath();\n    ctx.clearRect(0, 0, gridSize * n_grids, halfGridSize * nPitch)\n    \n    const drawOneNote = (elem) => {\n      ctx.restore();\n      ctx.fillStyle = colors[elem.key%12];\n      ctx.globalAlpha = 1;\n      ctx.fillRect(elem.start * gridSize, canvasHeight - elem.key * halfGridSize, (elem.end-0.5) * gridSize, halfGridSize);\n    }\n\n    const clearOneNote = (elem) =>{\n      ctx.restore();\n      ctx.clearRect(elem.start * gridSize, canvasHeight - elem.key * halfGridSize, (elem.end-0.5) * gridSize, halfGridSize);\n    }\n\n    notes.forEach((elem, index)=>{\n      timeOutButt[index] = setTimeout(()=>{\n        drawOneNote(elem, 1);\n        timeOutButt2[index] = setTimeout(()=>{\n          //console.log('index = ', index, 'finish time = ', elem.time+elem.duration)\n          clearOneNote(elem)\n        },elem.duration*1000)\n      }, elem.time*1000);\n    })\n    \n    // ctx.clearRect(0, 0, gridSize * n_grids, halfGridSize * nPitch)\n    ctx.closePath();\n  }\n\n  return [ canvasRef, progressDraw, progressClear ];\n}\n\nexport function ProgressCanvas(props) {\n  return (\n    <canvas\n      className=\"grid-canvas my-canvas\"\n      ref={props.forwardedRef}\n      width={props.width}\n      height={props.height}\n    />\n  )\n}","/home/slseanwu/webProgrammingFinalProject/src/axios.js",[],"/home/slseanwu/webProgrammingFinalProject/src/customButtonStyle.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":3,"column":21,"nodeType":"104","messageId":"105","endLine":3,"endColumn":27},{"ruleId":"102","severity":1,"message":"106","line":9,"column":3,"nodeType":"104","messageId":"105","endLine":9,"endColumn":22},{"ruleId":"102","severity":1,"message":"107","line":15,"column":45,"nodeType":"104","messageId":"105","endLine":15,"endColumn":57},{"ruleId":"102","severity":1,"message":"108","line":15,"column":59,"nodeType":"104","messageId":"105","endLine":15,"endColumn":71},{"ruleId":"102","severity":1,"message":"109","line":21,"column":3,"nodeType":"104","messageId":"105","endLine":21,"endColumn":16},{"ruleId":"102","severity":1,"message":"110","line":25,"column":3,"nodeType":"104","messageId":"105","endLine":25,"endColumn":18},{"ruleId":"102","severity":1,"message":"111","line":26,"column":3,"nodeType":"104","messageId":"105","endLine":26,"endColumn":19},{"ruleId":"102","severity":1,"message":"112","line":31,"column":3,"nodeType":"104","messageId":"105","endLine":31,"endColumn":18},{"ruleId":"102","severity":1,"message":"113","line":34,"column":17,"nodeType":"104","messageId":"105","endLine":34,"endColumn":24},{"ruleId":"102","severity":1,"message":"114","line":38,"column":3,"nodeType":"104","messageId":"105","endLine":38,"endColumn":19},{"ruleId":"102","severity":1,"message":"115","line":39,"column":3,"nodeType":"104","messageId":"105","endLine":39,"endColumn":14},{"ruleId":"102","severity":1,"message":"116","line":40,"column":3,"nodeType":"104","messageId":"105","endLine":40,"endColumn":19},{"ruleId":"102","severity":1,"message":"117","line":44,"column":9,"nodeType":"104","messageId":"105","endLine":44,"endColumn":14},{"ruleId":"118","severity":1,"message":"119","line":135,"column":14,"nodeType":"120","endLine":138,"endColumn":4},{"ruleId":"118","severity":1,"message":"119","line":215,"column":14,"nodeType":"120","endLine":230,"endColumn":4},{"ruleId":"118","severity":1,"message":"121","line":230,"column":6,"nodeType":"122","endLine":230,"endColumn":20,"suggestions":"123"},{"ruleId":"102","severity":1,"message":"124","line":251,"column":75,"nodeType":"104","messageId":"105","endLine":251,"endColumn":81},{"ruleId":"102","severity":1,"message":"125","line":251,"column":83,"nodeType":"104","messageId":"105","endLine":251,"endColumn":98},{"ruleId":"118","severity":1,"message":"119","line":264,"column":14,"nodeType":"120","endLine":277,"endColumn":4},{"ruleId":"118","severity":1,"message":"126","line":277,"column":6,"nodeType":"122","endLine":277,"endColumn":56,"suggestions":"127"},{"ruleId":"118","severity":1,"message":"128","line":311,"column":6,"nodeType":"122","endLine":311,"endColumn":17,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":390,"column":106,"nodeType":"132","messageId":"133","endLine":390,"endColumn":108},{"ruleId":"102","severity":1,"message":"103","line":3,"column":21,"nodeType":"104","messageId":"105","endLine":3,"endColumn":27},{"ruleId":"102","severity":1,"message":"134","line":19,"column":3,"nodeType":"104","messageId":"105","endLine":19,"endColumn":15},{"ruleId":"102","severity":1,"message":"135","line":21,"column":38,"nodeType":"104","messageId":"105","endLine":21,"endColumn":42},{"ruleId":"102","severity":1,"message":"136","line":22,"column":10,"nodeType":"104","messageId":"105","endLine":22,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":81,"column":14,"nodeType":"120","endLine":84,"endColumn":4},{"ruleId":"102","severity":1,"message":"137","line":99,"column":11,"nodeType":"104","messageId":"105","endLine":99,"endColumn":19},{"ruleId":"118","severity":1,"message":"138","line":144,"column":3,"nodeType":"104","endLine":144,"endColumn":12,"suggestions":"139"},{"ruleId":"118","severity":1,"message":"119","line":144,"column":14,"nodeType":"120","endLine":159,"endColumn":4},{"ruleId":"140","severity":1,"message":"141","line":185,"column":13,"nodeType":"142","endLine":185,"endColumn":79},{"ruleId":"140","severity":1,"message":"141","line":237,"column":17,"nodeType":"142","endLine":237,"endColumn":87},{"ruleId":"140","severity":1,"message":"141","line":299,"column":15,"nodeType":"142","endLine":299,"endColumn":85},{"ruleId":"102","severity":1,"message":"136","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":16},{"ruleId":"102","severity":1,"message":"143","line":2,"column":38,"nodeType":"104","messageId":"105","endLine":2,"endColumn":43},{"ruleId":"102","severity":1,"message":"113","line":2,"column":45,"nodeType":"104","messageId":"105","endLine":2,"endColumn":52},{"ruleId":"102","severity":1,"message":"144","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"145","line":15,"column":7,"nodeType":"104","messageId":"105","endLine":15,"endColumn":14},{"ruleId":"102","severity":1,"message":"146","line":58,"column":12,"nodeType":"104","messageId":"105","endLine":58,"endColumn":19},{"ruleId":"102","severity":1,"message":"147","line":58,"column":58,"nodeType":"104","messageId":"105","endLine":58,"endColumn":65},{"ruleId":"102","severity":1,"message":"148","line":58,"column":67,"nodeType":"104","messageId":"105","endLine":58,"endColumn":74},{"ruleId":"102","severity":1,"message":"124","line":58,"column":76,"nodeType":"104","messageId":"105","endLine":58,"endColumn":82},{"ruleId":"118","severity":1,"message":"149","line":68,"column":8,"nodeType":"122","endLine":68,"endColumn":54,"suggestions":"150"},{"ruleId":"102","severity":1,"message":"151","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"144","line":1,"column":27,"nodeType":"104","messageId":"105","endLine":1,"endColumn":36},{"ruleId":"102","severity":1,"message":"152","line":6,"column":11,"nodeType":"104","messageId":"105","endLine":6,"endColumn":18},{"ruleId":"102","severity":1,"message":"153","line":6,"column":20,"nodeType":"104","messageId":"105","endLine":6,"endColumn":31},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'downloadSongRequest' is defined but never used.","'progressDraw' is defined but never used.","'stopProgress' is defined but never used.","'SlidersFilled' is defined but never used.","'LoadingOutlined' is defined but never used.","'DownloadOutlined' is defined but never used.","'CommentOutlined' is defined but never used.","'Divider' is defined but never used.","'PlayArrowRounded' is defined but never used.","'StopRounded' is defined but never used.","'ArrowBackRounded' is defined but never used.","'Title' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'requestId'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'n_bars' is assigned a value but never used.","'n_grids_per_bar' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'canvasRef', 'composedNotes', 'gridSize', 'nGrids', 'nPitch', and 'recommendationPage'. Either include them or remove the dependency array.",["157"],"React Hook useEffect has missing dependencies: 'initEverything' and 'refId'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setRequestId' needs the current value of 'refId'.",["158"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'HomeOutlined' is defined but never used.","'Spin' is defined but never used.","'Button' is defined but never used.","'songData' is assigned a value but never used.","React Hook useEffect contains a call to 'setMyImg'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [myImg.length, canvasRef, props.n_results, props.composedSong.notes, props.recommendations, canvasHeight, nGrids, nPitch, gridSize] as a second argument to the useEffect Hook.",["159"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Space' is defined but never used.","'useEffect' is defined but never used.","'colors1' is assigned a value but never used.","'nullref' is assigned a value but never used.","'n_grids' is assigned a value but never used.","'n_pitch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'n_grids_per_bar'. Either include it or remove the dependency array.",["160"],"'useState' is defined but never used.","'noneRef' is assigned a value but never used.","'canvasWidth' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [hasRequested, requestId]",{"range":"171","text":"172"},"Update the dependencies array to be: [initNotes, canvasHeight, canvasWidth, originPage, recommendationPage, canvasRef, nGrids, nPitch, gridSize, composedNotes]",{"range":"173","text":"174"},"Update the dependencies array to be: [initEverything, refId, requestId]",{"range":"175","text":"176"},"Add dependencies array: [myImg.length, canvasRef, props.n_results, props.composedSong.notes, props.recommendations, canvasHeight, nGrids, nPitch, gridSize]",{"range":"177","text":"178"},"Update the dependencies array to be: [canvasWidth, canvasHeight, gridSize, recPage, n_grids_per_bar]",{"range":"179","text":"180"},[7100,7114],"[hasRequested, requestId]",[8668,8718],"[initNotes, canvasHeight, canvasWidth, originPage, recommendationPage, canvasRef, nGrids, nPitch, gridSize, composedNotes]",[9470,9481],"[initEverything, refId, requestId]",[5314,5314],", [myImg.length, canvasRef, props.n_results, props.composedSong.notes, props.recommendations, canvasHeight, nGrids, nPitch, gridSize]",[2153,2199],"[canvasWidth, canvasHeight, gridSize, recPage, n_grids_per_bar]"]