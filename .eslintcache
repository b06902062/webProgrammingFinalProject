[{"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\index.js":"1","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\App.js":"2","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\reportWebVitals.js":"3","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\buttonList.js":"4","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\axios.js":"5","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\useCanvas.js":"6","C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\useGridCanvas.js":"7"},{"size":517,"mtime":1609951679434,"results":"8","hashOfConfig":"9"},{"size":6777,"mtime":1610438939574,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1609951679435,"results":"11","hashOfConfig":"9"},{"size":2873,"mtime":1610440796706,"results":"12","hashOfConfig":"9"},{"size":1281,"mtime":1609951679432,"results":"13","hashOfConfig":"9"},{"size":2486,"mtime":1610436485856,"results":"14","hashOfConfig":"9"},{"size":2767,"mtime":1610388410604,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"13q5p3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\index.js",[],["32","33"],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\App.js",["34","35","36","37","38","39"],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\reportWebVitals.js",[],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\buttonList.js",[],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\axios.js",[],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\useCanvas.js",["40","41","42"],"C:\\Users\\ht940\\Desktop\\web_programming\\finalProject\\webProgrammingFinalProject\\src\\useGridCanvas.js",["43"],"import React, { useEffect, useRef } from 'react';\nimport { useWindowSize } from './useCanvas.js';\n\n/* ========================================================================== */\nconst n_grids_per_bar = 16;\nconst n_bars = 8;\nconst n_grids = n_grids_per_bar * n_bars; // number of grids in horizontal direction\nconst n_pitch = 64; // number of grids in vertical direction\n/* ========================================================================== */\n\nexport function draw(ctx, canvasWidth, canvasHeight, gridSize){\n  const halfGridSize = Math.floor(gridSize/2);\n  ctx.save();\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n  \n  for(let i = 0; i < canvasHeight; i++){\n    let flag = Math.floor(i/halfGridSize)%12;\n    ctx.restore();\n    ctx.globalAlpha = 1;\n    if(flag === 1 || flag === 3 || flag === 6 || flag === 8 || flag === 10){\n      ctx.fillStyle = 'rgba(30, 30, 30, 1)';\n      ctx.fillRect(0, i, canvasWidth, 1);\n    }\n    else{\n      ctx.fillStyle = 'rgba(60, 60, 60, 1)';\n      ctx.fillRect(0, i, canvasWidth, 1);\n    }\n  }\n\n  ctx.beginPath();\n  for (let i = 0; i < canvasWidth; i += gridSize) {\n    ctx.lineWidth = (1.0+((i/gridSize%n_grids_per_bar)===0)*5)*0.1;\n    if ((i/gridSize%n_grids_per_bar)===0)\n      ctx.strokeStyle = 'gray';\n    else\n      continue; //ctx.strokeStyle = '#717171';\n    ctx.beginPath();\n    ctx.moveTo(i + 0.5, 0);\n    ctx.lineTo(i + 0.5, canvasHeight);\n    ctx.stroke();\n  }\n  for (let i = 0; i < canvasHeight; i += halfGridSize) {\n    ctx.lineWidth = (1.0+((i/halfGridSize%12)===4)*5)*0.1; // [myRef]\n    if ((i/halfGridSize%12)===4)\n      ctx.strokeStyle = 'gray';\n    else\n      continue; //ctx.strokeStyle = '#717171';'#F5927E'\n    ctx.beginPath();\n    ctx.moveTo(0, i + 0.5);\n    ctx.lineTo(canvasWidth, i + 0.5);\n    ctx.stroke();\n  }\n  ctx.restore();\n};\n\nexport function useGridCanvas(){\n    const canvasRef = useRef(null);\n    let [window_width, window_height] = useWindowSize();\n    // if (window_width < 1000)\n    //   window_width = 1000;\n    const canvasWidth = window_width - window_width % n_grids;\n    const canvasHeight = Math.floor(canvasWidth / n_grids) * n_pitch;\n    const gridSize = Math.floor(canvasWidth / n_grids);\n\n    useEffect(()=>{\n        const canvasObj = canvasRef.current;\n        const ctx = canvasObj.getContext('2d');\n        // clear the canvas area before rendering the coordinates held in state\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\n\n        draw(ctx, canvasWidth, canvasHeight, gridSize);\n    }, [canvasWidth, canvasHeight, gridSize]);\n\n    return [ canvasRef ];\n}\n\nexport function GridCanvas(props) {\n  return (\n    <canvas\n      className=\"grid-canvas my-canvas\"\n      ref={props.forwardedRef}\n      width={props.width}\n      height={props.height}\n    />\n  )\n}\n\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":8,"nodeType":"50","messageId":"51","endLine":2,"endColumn":17},{"ruleId":"48","severity":1,"message":"52","line":4,"column":21,"nodeType":"50","messageId":"51","endLine":4,"endColumn":27},{"ruleId":"53","severity":1,"message":"54","line":71,"column":14,"nodeType":"55","endLine":74,"endColumn":4},{"ruleId":"53","severity":1,"message":"54","line":115,"column":14,"nodeType":"55","endLine":124,"endColumn":4},{"ruleId":"53","severity":1,"message":"54","line":152,"column":14,"nodeType":"55","endLine":157,"endColumn":4},{"ruleId":"53","severity":1,"message":"56","line":157,"column":6,"nodeType":"57","endLine":157,"endColumn":44,"suggestions":"58"},{"ruleId":"48","severity":1,"message":"59","line":1,"column":27,"nodeType":"50","messageId":"51","endLine":1,"endColumn":36},{"ruleId":"48","severity":1,"message":"60","line":31,"column":9,"nodeType":"50","messageId":"51","endLine":31,"endColumn":16},{"ruleId":"48","severity":1,"message":"61","line":55,"column":24,"nodeType":"50","messageId":"51","endLine":55,"endColumn":37},{"ruleId":"48","severity":1,"message":"61","line":58,"column":24,"nodeType":"50","messageId":"51","endLine":58,"endColumn":37},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'PianoRoll' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'canvasRef', 'gridSize', 'nGrids', and 'nPitch'. Either include them or remove the dependency array.","ArrayExpression",["64"],"'useEffect' is defined but never used.","'colors1' is assigned a value but never used.","'window_height' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [initNotes, canvasHeight, canvasWidth, canvasRef, nGrids, nPitch, gridSize]",{"range":"67","text":"68"},[4781,4819],"[initNotes, canvasHeight, canvasWidth, canvasRef, nGrids, nPitch, gridSize]"]